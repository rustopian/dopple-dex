use solana_program_test::*;
use solana_sdk::{
    signature::Keypair,
    signer::Signer,
    transaction::Transaction,
    instruction::Instruction,
    system_instruction,
    message::Message,
};
use solana_program::{pubkey::Pubkey, program_pack::Pack};
use spl_token::{
    instruction as token_instruction, 
    state::{Account as TokenAccount, Mint as TokenMint},
};
use dex_pool_program::instruction::PoolInstruction;
use borsh::{BorshSerialize, BorshDeserialize};

#[tokio::test]
async fn test_dex_with_plugin() {
    // Program IDs
    let pool_program_id = Pubkey::new_unique();
    let plugin_program_id = Pubkey::new_unique();

    // Setup ProgramTest
    let mut program_test = ProgramTest::new(
        "dex_pool_program",
        pool_program_id,
        processor!(dex_pool_program::processor::Processor::process)
    );
    program_test.add_program(
        "constant_product_plugin",
        plugin_program_id,
        processor!(constant_product_plugin::processor::Processor::process)
    );

    // Start test context
    let mut ctx = program_test.start_with_context().await;
    let payer = &ctx.payer;

    // 1) Create plugin_state
    let plugin_state = Keypair::new();
    let plugin_state_size = 64;
    let rent = ctx.banks_client.get_rent().await.unwrap();
    let lamports = rent.minimum_balance(plugin_state_size);
    let create_plugin_state_ix = system_instruction::create_account(
        &payer.pubkey(),
        &plugin_state.pubkey(),
        lamports,
        plugin_state_size as u64,
        &plugin_program_id,
    );
    let tx = Transaction::new_signed_with_payer(
        &[create_plugin_state_ix],
        Some(&payer.pubkey()),
        &[payer, &plugin_state],
        ctx.last_blockhash,
    );
    ctx.banks_client.process_transaction(tx).await.unwrap();

    // 2) Create token mints A & B
    let mint_a = Keypair::new();
    let mint_b = Keypair::new();
    let mint_rent = rent.minimum_balance(TokenMint::LEN);
    let create_mint_a_ix = system_instruction::create_account(
        &payer.pubkey(),
        &mint_a.pubkey(),
        mint_rent,
        TokenMint::LEN as u64,
        &spl_token::id(),
    );
    let init_mint_a_ix = token_instruction::initialize_mint(
        &spl_token::id(),
        &mint_a.pubkey(),
        &payer.pubkey(),
        None,
        6,
    ).unwrap();
    let create_mint_b_ix = system_instruction::create_account(
        &payer.pubkey(),
        &mint_b.pubkey(),
        mint_rent,
        TokenMint::LEN as u64,
        &spl_token::id(),
    );
    let init_mint_b_ix = token_instruction::initialize_mint(
        &spl_token::id(),
        &mint_b.pubkey(),
        &payer.pubkey(),
        None,
        6,
    ).unwrap();

    let tx2 = Transaction::new_signed_with_payer(
        &[
            create_mint_a_ix, init_mint_a_ix,
            create_mint_b_ix, init_mint_b_ix,
        ],
        Some(&payer.pubkey()),
        &[payer, &mint_a, &mint_b],
        ctx.last_blockhash,
    );
    ctx.banks_client.process_transaction(tx2).await.unwrap();

    // 3) Derive the pool PDA from (sorted(mintA,mintB), plugin_program_id, plugin_state)
    let (sort_a, sort_b) = if mint_a.pubkey() < mint_b.pubkey() {
        (mint_a.pubkey(), mint_b.pubkey())
    } else {
        (mint_b.pubkey(), mint_a.pubkey())
    };
    let plugin_state_pubkey = plugin_state.pubkey();
    let seeds = &[
        b"pool",
        sort_a.as_ref(),
        sort_b.as_ref(),
        plugin_program_id.as_ref(),
        plugin_state_pubkey.as_ref(),
    ];
    let (pool_pda, _pool_bump) = Pubkey::find_program_address(seeds, &pool_program_id);

    // 4) Create vault A, vault B, LP mint (pretend they are PDAs or just normal)
    let vault_a = Keypair::new();
    let vault_b = Keypair::new();
    let lp_mint = Keypair::new();

    // Similar creation as before
    let rent_exempt_ta = rent.minimum_balance(TokenAccount::LEN);
    let vault_a_ixs = [
        system_instruction::create_account(
            &payer.pubkey(),
            &vault_a.pubkey(),
            rent_exempt_ta,
            TokenAccount::LEN as u64,
            &spl_token::id(),
        ),
        token_instruction::initialize_account3(
            &spl_token::id(),
            &vault_a.pubkey(),
            &mint_a.pubkey(),
            &payer.pubkey(),
        ).unwrap(),
    ];
    let vault_b_ixs = [
        system_instruction::create_account(
            &payer.pubkey(),
            &vault_b.pubkey(),
            rent_exempt_ta,
            TokenAccount::LEN as u64,
            &spl_token::id(),
        ),
        token_instruction::initialize_account3(
            &spl_token::id(),
            &vault_b.pubkey(),
            &mint_b.pubkey(),
            &payer.pubkey(),
        ).unwrap(),
    ];
    let rent_exempt_mint = rent.minimum_balance(TokenMint::LEN);
    let create_lp_mint_ix = system_instruction::create_account(
        &payer.pubkey(),
        &lp_mint.pubkey(),
        rent_exempt_mint,
        TokenMint::LEN as u64,
        &spl_token::id(),
    );
    let init_lp_mint_ix = token_instruction::initialize_mint(
        &spl_token::id(),
        &lp_mint.pubkey(),
        &payer.pubkey(),
        None,
        6
    ).unwrap();

    // Split into separate transactions to avoid signer bug/limitation

    // Tx 3a: Create Vault A
    println!("DEBUG: Signing tx3a (vault_a) with signers: [payer: {}, vault_a: {}]", payer.pubkey(), vault_a.pubkey());
    let tx3a = Transaction::new_signed_with_payer(
        &vault_a_ixs,
        Some(&payer.pubkey()),
        &[payer, &vault_a], // Signers for create+init vault A
        ctx.last_blockhash,
    );
    ctx.banks_client.process_transaction(tx3a).await.unwrap();
    ctx.last_blockhash = ctx.banks_client.get_latest_blockhash().await.unwrap();

    // Tx 3b: Create Vault B
    println!("DEBUG: Signing tx3b (vault_b) with signers: [payer: {}, vault_b: {}]", payer.pubkey(), vault_b.pubkey());
    let tx3b = Transaction::new_signed_with_payer(
        &vault_b_ixs,
        Some(&payer.pubkey()),
        &[payer, &vault_b], // Signers for create+init vault B
        ctx.last_blockhash,
    );
    ctx.banks_client.process_transaction(tx3b).await.unwrap();
    ctx.last_blockhash = ctx.banks_client.get_latest_blockhash().await.unwrap();

    // Tx 3c: Create LP Mint
    let lp_mint_ixs = [create_lp_mint_ix, init_lp_mint_ix];
    println!("DEBUG: Signing tx3c (lp_mint) with signers: [payer: {}, lp_mint: {}]", payer.pubkey(), lp_mint.pubkey());
    let tx3c = Transaction::new_signed_with_payer(
        &lp_mint_ixs,
        Some(&payer.pubkey()),
        &[payer, &lp_mint], // Signers for create+init LP mint
        ctx.last_blockhash,
    );
    ctx.banks_client.process_transaction(tx3c).await.unwrap();
    ctx.last_blockhash = ctx.banks_client.get_latest_blockhash().await.unwrap();

    // Manually create PDA account due to ProgramTest persistence issue
    // 5) Create the pool state PDA account MANUALLY in the test
    let pool_space = std::mem::size_of::<dex_pool_program::state::PoolState>();
    let lamports_pool = rent.minimum_balance(pool_space);
    let create_pool_pda_ix = system_instruction::create_account(
        &payer.pubkey(),
        &pool_pda, // Use the derived PDA address
        lamports_pool,
        pool_space as u64,
        &pool_program_id, // Owner is the pool program
    );
    let tx_create_pda = Transaction::new_signed_with_payer(
        &[create_pool_pda_ix],
        Some(&payer.pubkey()),
        &[payer], // Only payer needs to sign
        ctx.last_blockhash,
    );
    ctx.banks_client.process_transaction(tx_create_pda).await.unwrap();
    ctx.last_blockhash = ctx.banks_client.get_latest_blockhash().await.unwrap();

    // 6) InitializePool - Instruction requires all 12 accounts now
    let init_pool_ix = Instruction {
        program_id: pool_program_id,
        accounts: vec![
            solana_program::instruction::AccountMeta::new(payer.pubkey(), true),        // 0: Payer/Signer
            solana_program::instruction::AccountMeta::new(pool_pda, false),          // 1: Pool State PDA (Writable=YES needed implicitly, Signer=NO)
            solana_program::instruction::AccountMeta::new(vault_a.pubkey(), false),   // 2: Vault A Key
            solana_program::instruction::AccountMeta::new(vault_b.pubkey(), false),   // 3: Vault B Key
            solana_program::instruction::AccountMeta::new(lp_mint.pubkey(), false),   // 4: LP Mint Key
            solana_program::instruction::AccountMeta::new_readonly(mint_a.pubkey(), false), // 5: Mint A Key
            solana_program::instruction::AccountMeta::new_readonly(mint_b.pubkey(), false), // 6: Mint B Key
            solana_program::instruction::AccountMeta::new_readonly(plugin_program_id, false), // 7: Plugin Program ID
            solana_program::instruction::AccountMeta::new(plugin_state.pubkey(), false), // 8: Plugin State Key
            solana_program::instruction::AccountMeta::new_readonly(solana_program::system_program::id(), false), // 9: System Program (for invoke_signed)
            solana_program::instruction::AccountMeta::new_readonly(solana_program::sysvar::rent::id(), false),     // 10: Rent Sysvar (for invoke_signed)
        ],
        data: dex_pool_program::instruction::PoolInstruction::InitializePool
            .try_to_vec().unwrap(),
    };
    
    println!("DEBUG: === Entering tx_init_pool Creation/Signing ===");

    // --- DIAGNOSTIC: Rigorous Message Inspection ---
    println!("DEBUG: Before Message::new");
    let init_pool_message = Message::new(
        &[init_pool_ix.clone()], // Use the actual instruction intended for the tx
        Some(&payer.pubkey())
    );
    println!("DEBUG: After Message::new");
    // (Keep message content logging commented for now to isolate the panic point)
    /*
    println!("\nDEBUG: --- tx_init_pool Message Analysis ---");
    ...
    println!("DEBUG: --- End Message Analysis ---");
    */
    // --- END DIAGNOSTIC ---

    println!("DEBUG: Before Transaction::new_unsigned");
    let mut tx_init_pool = Transaction::new_unsigned(init_pool_message);
    println!("DEBUG: After Transaction::new_unsigned");
    
    println!("DEBUG: Before signers_vec definition");
    let signers_vec: Vec<&dyn Signer> = vec![payer]; // Correct signer list
    println!("DEBUG: After signers_vec definition");

    println!("DEBUG: Before tx_init_pool.sign()");
    tx_init_pool.sign(
        &signers_vec[..], // Pass slice ref with only payer
        ctx.last_blockhash
    );
    println!("DEBUG: After tx_init_pool.sign() - SIGNING SUCCEEDED"); // If we reach here, signing worked

    println!("DEBUG: Before process_transaction(tx_init_pool)");
    ctx.banks_client.process_transaction(tx_init_pool).await.unwrap();
    println!("DEBUG: After process_transaction(tx_init_pool)");

    // Remove the immediate verification check - it's unreliable here
    /*
    // DEBUG: Verify PoolState after initialization
    ...
    // END DEBUG
    */

    // 7) Make user token accounts for minted tokens
    let user_token_a = Keypair::new();
    let user_token_b = Keypair::new();
    let user_lp = Keypair::new();
    let user_acc_ixs = [
        system_instruction::create_account(
            &payer.pubkey(),
            &user_token_a.pubkey(),
            rent_exempt_ta,
            TokenAccount::LEN as u64,
            &spl_token::id(),
        ),
        token_instruction::initialize_account(
            &spl_token::id(),
            &user_token_a.pubkey(),
            &mint_a.pubkey(),
            &payer.pubkey(),
        ).unwrap(),
        system_instruction::create_account(
            &payer.pubkey(),
            &user_token_b.pubkey(),
            rent_exempt_ta,
            TokenAccount::LEN as u64,
            &spl_token::id(),
        ),
        token_instruction::initialize_account(
            &spl_token::id(),
            &user_token_b.pubkey(),
            &mint_b.pubkey(),
            &payer.pubkey(),
        ).unwrap(),
        system_instruction::create_account(
            &payer.pubkey(),
            &user_lp.pubkey(),
            rent_exempt_ta,
            TokenAccount::LEN as u64,
            &spl_token::id(),
        ),
        token_instruction::initialize_account(
            &spl_token::id(),
            &user_lp.pubkey(),
            &lp_mint.pubkey(),
            &payer.pubkey(),
        ).unwrap(),
    ];
    let tx_user_acc = Transaction::new_signed_with_payer(
        &user_acc_ixs,
        Some(&payer.pubkey()),
        &[payer, &user_token_a, &user_token_b, &user_lp],
        ctx.last_blockhash,
    );
    ctx.banks_client.process_transaction(tx_user_acc).await.unwrap();

    // 8) Mint tokens A and B to user
    let mint_a_amount = 1000;
    let mint_b_amount = 2000;
    let mint_to_ixs = [
        token_instruction::mint_to(
            &spl_token::id(),
            &mint_a.pubkey(),
            &user_token_a.pubkey(),
            &payer.pubkey(),
            &[],
            mint_a_amount,
        ).unwrap(),
        token_instruction::mint_to(
            &spl_token::id(),
            &mint_b.pubkey(),
            &user_token_b.pubkey(),
            &payer.pubkey(),
            &[],
            mint_b_amount,
        ).unwrap(),
    ];
    let tx_mint = Transaction::new_signed_with_payer(
        &mint_to_ixs,
        Some(&payer.pubkey()),
        &[payer],
        ctx.last_blockhash,
    );
    ctx.banks_client.process_transaction(tx_mint).await.unwrap();

    // --- Pre-flight check: Serialize/Deserialize PluginInstruction locally ---
    let test_plugin_ix_data = constant_product_plugin::instruction::PluginInstruction::ComputeAddLiquidity {
        reserve_a: 0, // Placeholder values, actual values don't matter for this check 
        reserve_b: 0,
        deposit_a: 1000,
        deposit_b: 2000,
        total_lp_supply: 0,
    }.try_to_vec().unwrap();
    println!("DEBUG: Local PluginInstruction Data ({} bytes): {:?}", test_plugin_ix_data.len(), test_plugin_ix_data);
    let _decoded_instruction = constant_product_plugin::instruction::PluginInstruction::try_from_slice(&test_plugin_ix_data).expect("Local deserialization failed!");
    println!("DEBUG: Local deserialization successful.");
    // --- End Pre-flight check ---

    // 9) AddLiquidity
    let add_liq_ix = Instruction {
        program_id: pool_program_id,
        accounts: vec![
            // 0 user signer
            solana_program::instruction::AccountMeta::new(payer.pubkey(), true),
            // 1 pool state
            solana_program::instruction::AccountMeta::new(pool_pda, false),
            // 2 vault a
            solana_program::instruction::AccountMeta::new(vault_a.pubkey(), false),
            // 3 vault b
            solana_program::instruction::AccountMeta::new(vault_b.pubkey(), false),
            // 4 lp mint
            solana_program::instruction::AccountMeta::new(lp_mint.pubkey(), false),
            // 5 user token A
            solana_program::instruction::AccountMeta::new(user_token_a.pubkey(), false),
            // 6 user token B
            solana_program::instruction::AccountMeta::new(user_token_b.pubkey(), false),
            // 7 user LP
            solana_program::instruction::AccountMeta::new(user_lp.pubkey(), false),
            // 8 token program
            solana_program::instruction::AccountMeta::new_readonly(spl_token::id(), false),
            // 9 plugin program
            solana_program::instruction::AccountMeta::new_readonly(plugin_program_id, false),
            // 10 plugin state
            solana_program::instruction::AccountMeta::new(plugin_state.pubkey(), false),
        ],
        data: dex_pool_program::instruction::PoolInstruction::AddLiquidity {
            amount_a: 1000,
            amount_b: 2000,
        }.try_to_vec().unwrap(),
    };
    let tx_add_liq = Transaction::new_signed_with_payer(
        &[add_liq_ix],
        Some(&payer.pubkey()),
        &[payer],
        ctx.last_blockhash,
    );
    ctx.banks_client.process_transaction(tx_add_liq).await.unwrap();

    // Check user LP > 0
    let user_lp_data = ctx.banks_client.get_account(user_lp.pubkey()).await.unwrap().unwrap();
    let user_lp_acc_data = TokenAccount::unpack(&user_lp_data.data).unwrap();
    assert!(user_lp_acc_data.amount > 0);

    // 10) RemoveLiquidity
    let remove_liq_ix = Instruction {
        program_id: pool_program_id,
        accounts: vec![
            solana_program::instruction::AccountMeta::new(payer.pubkey(), true),
            solana_program::instruction::AccountMeta::new(pool_pda, false),
            solana_program::instruction::AccountMeta::new(vault_a.pubkey(), false),
            solana_program::instruction::AccountMeta::new(vault_b.pubkey(), false),
            solana_program::instruction::AccountMeta::new(lp_mint.pubkey(), false),
            solana_program::instruction::AccountMeta::new(user_token_a.pubkey(), false),
            solana_program::instruction::AccountMeta::new(user_token_b.pubkey(), false),
            solana_program::instruction::AccountMeta::new(user_lp.pubkey(), false),
            solana_program::instruction::AccountMeta::new_readonly(spl_token::id(), false),
            solana_program::instruction::AccountMeta::new_readonly(plugin_program_id, false),
            solana_program::instruction::AccountMeta::new(plugin_state.pubkey(), false),
        ],
        data: dex_pool_program::instruction::PoolInstruction::RemoveLiquidity {
            amount_lp: user_lp_acc_data.amount,
        }.try_to_vec().unwrap(),
    };
    let tx_remove_liq = Transaction::new_signed_with_payer(
        &[remove_liq_ix],
        Some(&payer.pubkey()),
        &[payer],
        ctx.last_blockhash,
    );
    ctx.banks_client.process_transaction(tx_remove_liq).await.unwrap();

    // Confirm user LP is zero
    let user_lp_data_after = ctx.banks_client.get_account(user_lp.pubkey()).await.unwrap().unwrap();
    let user_lp_acc_after = TokenAccount::unpack(&user_lp_data_after.data).unwrap();
    assert_eq!(user_lp_acc_after.amount, 0);
}
